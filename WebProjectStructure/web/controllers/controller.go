package controllers

/*
https://habrahabr.ru/post/331456/?utm_source=fb&utm_medium=social&utm_campaign=kak-my-homyaka-yablokami-kormili-ili-effek

Обычно на уровне контроллеров делают больше всего ошибок: напихают лишней логики, забудут про интерфейсы и изоляцию,
а потом вообще скатятся к функциональному программированию. Вообще в Go контроллеры страдают от той же болезни,
что и в iOS: их постоянно перенагружают. Поэтому сразу определим, какие задачи они должны выполнять:

получать параметры запроса;
вызывать соответствующий метод сервиса;
отправлять ответ об успехе или ошибке с изменением форматирования по необходимости.
Необходимость — это, например, когда сервис логично возвращает числом id некоего объекта, нет ничего криминального в
том, что контроллер обернет его в map перед отправкой:
c.IndentedJSON(http.StatusCreated, gin.H { "identifier": m.ID })

Возьмем какой-нибудь пример типового контроллера.

Класс, если опускать импорты, начинается с интерфейса контроллера. Да-да, соблюдаем букву 'D' в слове SOLID, даже если
у вас всегда будет только одна реализация. Это значительно облегчает тестирование, давая возможность подменять сам
контроллер на его mock:

type Order interface {
    PlaceOrder(c *gin.Context)
    AroundWithPrices(c *gin.Context)
}

Далее у нас идет сама структура контроллера и его конструктор, принимающий в себя зависимости, который мы будем
вызывать при создании контроллера в api.go:

// С маленькой буквы, чтобы наружу ничего не вываливалось
type order struct {
    service services.Order
}

func NewOrder(service services.Order) Order {
    return &order {
        service: service,
    }
}

И, наконец, метод, обрабатывающий запрос. Так как мы успешно прошли слой с биндингом, то можем быть уверены, что все
параметры у нас гарантировано есть и мы можем получить их с помощью MustGet, не боясь панических атак:

func (o order)PlaceOrder(c *gin.Context) {
    m := c.MustGet(BindingOrder).(*model.Order)
    o.service.PlaceOrder(m)
    c.IndentedJSON(http.StatusCreated, gin.H {
        "identifier": m.ID,
    })
}

С опциональными параметрами та же история, но только на уровне биндера стоит заложить некое нулевое значение, которое
вы будете проверять в контроллере, подставляя в него дефолтное при отсутствии, или просто игнорируя.

 */
